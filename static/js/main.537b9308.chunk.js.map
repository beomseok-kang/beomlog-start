{"version":3,"sources":["Components/Shared/Input.tsx","Components/Shared/Button.tsx","api/firebase.ts","Modules/dialog.ts","Components/Shared/Loader.tsx","Modules/loading.ts","lib/asyncUtils.ts","Components/Shared/Logo.tsx","Components/Shared/UserInfoButton.tsx","Components/Shared/HamburgerButton.tsx","Components/Shared/SmallButton.tsx","Components/Shared/UserInfo.tsx","Components/Shared/ToggleMenu.tsx","Components/Shared/Darkener.tsx","Container/Home/HeaderContainer.tsx","Modules/user.ts","Container/Login/FormContainer.tsx","Pages/LoginPage.tsx","Components/Shared/Dialog.tsx","Container/Dialog/DialogContainer.tsx","Components/CategoryPage/CategoryPostsList.tsx","Modules/categoryPosts.ts","Container/Home/HomePostsContainer.tsx","Components/HomePage/NewPostButton.tsx","Components/HomePage/Intro.tsx","Container/Home/HomeIntroContainer.tsx","Pages/HomePage.tsx","Container/Register/RegisterFormContainer.tsx","Pages/RegisterPage.tsx","Container/Category/CategoryPostsContainer.tsx","Container/Category/CategoryInfoContainer.tsx","Pages/CategoryPage.tsx","Modules/post.ts","Components/PostPage/NoPostWrapper.tsx","Container/Post/PostContainer.tsx","Pages/PostPage.tsx","Components/WritingPage/Editor.js","Components/Shared/InvalidAccess.tsx","Container/Writing/EditorContainer.tsx","Pages/WritingPage.tsx","Pages/UpdatePage.tsx","Components/UserSettingsPage/UserSetting.tsx","Components/UserSettingsPage/CategorySetting.tsx","Container/UserSettings/UserSettingsContainer.tsx","Pages/UserSettingsPage.tsx","Container/Unfound/UnfoundContainer.tsx","Pages/UnfoundPage.tsx","App.tsx","serviceWorker.ts","Modules/index.ts","index.tsx"],"names":["Input","id","value","type","placeholder","onChange","className","isValid","required","defaultProps","Button","isFilled","children","onClick","React","memo","signUp","email","password","userData","a","firebase","auth","createUserWithEmailAndPassword","catch","error","Error","currentUser","uid","createUserData","signIn","signInWithEmailAndPassword","signOut","console","log","db","collection","doc","set","getUserDataFromDatabase","data","undefined","get","then","snapshot","e","updateUserDataOnDatabase","userState","name","imgUrl","phrase","categories","getPostDataFromDatabase","postId","uploadPostDataToDatabase","postData","increment","firestore","FieldValue","category","update","deletePostDataFromDatabase","decrement","delete","updatePostDataOnDatabase","uploadComment","commentParams","comments","arrayUnion","deleteComment","arrayRemove","getCategoryPostsFromDatabase","params","docs","map","docData","docDataTemp","getDataFromUidArray","uidArray","result","i","length","getHomePostsFromDatabase","orderBy","limit","Array","from","Set","uploadImgAndUpdateDatabase","file","fileRef","storage","ref","child","put","getDownloadURL","downloadUrl","nextId","loadDialog","dialogType","title","text","payload","removeDialog","createStandardAction","initialState","dialog","state","action","concat","filter","Loader","version","xmlns","xmlnsXlink","x","y","width","height","viewBox","enableBackground","xmlSpace","opacity","fill","d","attributeType","attributeName","to","dur","repeatCount","LOADING","setLoading","createUserSaga","promiseCreator","SUCCESS","ERROR","saga","call","createPostSaga","meta","createCategoryPostsSaga","Logo","isHome","UserInfoButton","src","alt","showToggleMenu","checked","SmallButton","color","UserInfo","showUserInfo","onClickSignOutButton","onClickLoginButton","onClickSettingsButton","onClickMenuItem","onClickUpload","key","numOfPosts","toString","Darkener","HeaderContainer","user","useSelector","dispatch","useDispatch","useState","setShowUserInfo","setShowToggleMenu","routerHistory","useHistory","headerClassName","onClickSignout","removeUserData","categoriesToArray","Object","values","getUserData","push","pathname","alert","userSaga","GET_USERDATA","getUserSaga","updateUserSaga","takeEvery","FormContainer","dispatchSignInWarningDialog","initialValuesState","setValues","setIsValid","isLoading","setIsLoading","onSubmit","event","preventDefault","target","LoginPage","DialogComponent","showComponent","setShowComponent","useEffect","timer","setTimeout","clearTimeout","DialogContainer","dialogs","onRemove","NoPostWrapper","showNoPost","setShowNoPost","CategoryPostsList","categoryPosts","post","dangerouslySetInnerHTML","__html","editorData","categoryPostsSaga","GET_POSTS","GET_HOME_POSTS","DELETE_POSTS","getCategoryPostsSaga","getHomePostsSaga","HomePostsContainer","homePosts","loading","NewPostButton","Intro","isSignedIn","h1Content","pContent","HomeIntroContainer","intro","HomePage","RegisterFormContainer","dispatchSignUpWarningDialog","initialValueState","checkPassword","matchPassword","setMatchPassword","RegisterPage","CategoryPostsContainer","CategoryInfoContainer","CategoryPage","match","postSaga","UPLOAD_POST","GET_POST","DELETE_POST","time","getPostSaga","uploadPostSaga","deletePostSaga","updatePostSaga","PostContainer","comment","setComment","isUploadingComment","setIsUploadingComment","isWriter","getPost","onClickCommentDeleteButton","toDate","commentSection","nickname","Date","commentData","updateCommentOnPostState","rows","cols","maxLength","buildBody","deletePost","PostPage","Editor","editor","ClassicEditor","InvalidAccess","showInvalid","setShowInvalid","EditorContainer","isUpdating","initialCategoryValue","initialData","initialTitle","categoryValue","setCategoryValue","setData","setTitle","getData","updatePost","toUTCString","uploadPost","WritingPage","UpdatePage","UserSetting","newImgFileDir","nicknameValue","phraseValue","onChangePhraseValue","onChangeNicnameValue","onChangeImgFile","accept","newImgFile","onClickXButton","onClickAddButton","inputValue","onInputChange","showAddItem","UserSettingsContainer","setPhrase","setNickname","setShowAddItem","imgFile","setImgFile","imgFileDir","setImgFileDir","categoriesTemp","setCategoriesTemp","categoryInputValue","setCategoryInputValue","fr","FileReader","onload","onClickSubmitButton","files","readAsDataURL","assign","UserSettingsPage","UnfoundContainer","UnfoundPage","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","App","exact","path","component","render","Boolean","window","location","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.537b9308.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.scss';\r\n\r\ntype InputProps = {\r\n    id: string;\r\n    value: string;\r\n    type: string;\r\n    placeholder: string;\r\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    isValid: boolean | null;\r\n}\r\n\r\nfunction Input({ id, value, type, placeholder, onChange, isValid }: InputProps) {\r\n\r\n    const className = isValid === false? \"text-input invalid\" : \"text-input\";\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                id={id}\r\n                type={type}\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder={placeholder}\r\n                required\r\n                className={className}\r\n            />\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nInput.defaultProps = {\r\n    isValid: null\r\n};\r\n\r\nexport default Input;\r\n\r\n","import React from 'react';\r\nimport './Button.scss';\r\n\r\ntype ButtonProps = {\r\n    isFilled: boolean;\r\n    children: React.ReactNode;\r\n    type: \"button\" | \"submit\" | \"reset\" | undefined;\r\n    onClick?: () => void;\r\n}\r\n\r\nfunction Button ({\r\n    isFilled,\r\n    children,\r\n    onClick,\r\n    type\r\n}: ButtonProps) {\r\n\r\n    const className = isFilled ? 'btn filled' : 'btn not-filled';\r\n\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={className}\r\n            onClick={onClick}\r\n        >\r\n            {children}\r\n        </button>\r\n    );\r\n}\r\n\r\nButton.defaultProps = {\r\n    isFilled: false\r\n};\r\n\r\nexport default React.memo(Button);\r\n\r\n","import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport { db, storage } from '../App';\r\nimport { PostDataInDatabase, comment } from '../Modules/post';\r\nimport { UserState } from '../Modules/user';\r\nimport { getCategoryPostsParams } from '../Modules/categoryPosts';\r\n\r\ntype category = {\r\n    category: string;\r\n    numOfPosts: number;\r\n};\r\n\r\n///////////// authentication /////////////////////////\r\n\r\nexport const signUp = async (email: string, password: string, userData: UserData) => {\r\n    await firebase.auth().createUserWithEmailAndPassword(email, password)\r\n        .catch(function(error) {\r\n            throw new Error(error);\r\n        });\r\n    if(firebase.auth().currentUser?.uid) {\r\n        await createUserData(\r\n        firebase.auth().currentUser?.uid,\r\n        userData\r\n        );\r\n    }\r\n    return firebase.auth().currentUser;\r\n};\r\n\r\nexport const signIn = async (email: string, password: string) => {\r\n    await firebase.auth().signInWithEmailAndPassword(email, password)\r\n        .catch(function(error) {\r\n            throw new Error(error);\r\n        });\r\n    return firebase.auth().currentUser;\r\n};\r\n\r\nexport const signOut = async () => {\r\n    await firebase.auth().signOut().catch(function(error) {\r\n        throw new Error(error);\r\n    });\r\n    console.log('signed out');\r\n}\r\n\r\n//////////////// firestore //////////////////////////////////\r\n\r\n//userData\r\n\r\nexport type UserData = {\r\n    email: string;\r\n    name: string;\r\n    imgUrl: string;\r\n    phrase: string;\r\n    categories: {\r\n        [category: string]: category\r\n    }\r\n}\r\n\r\nexport const createUserData = async (uid: string | undefined, userData: UserData) => {\r\n    await db.collection('user').doc(uid).set(userData);\r\n};\r\n\r\nexport const getUserDataFromDatabase = async (uid: string) => {\r\n    let data: object | undefined = undefined;\r\n    await db.collection('user').doc(uid).get().then((snapshot) => {\r\n        data = snapshot.data();\r\n    }).catch(e => {\r\n        console.log(e);\r\n    });\r\n    return data;\r\n};\r\n\r\nexport const updateUserDataOnDatabase = async (userState: UserState) => {\r\n    await db.collection('user').doc(userState.uid).set({\r\n        name: userState.name,\r\n        email: userState.email,\r\n        imgUrl: userState.imgUrl,\r\n        phrase: userState.phrase,\r\n        categories: userState.categories\r\n    }); \r\n};\r\n\r\n//post\r\n\r\nexport const getPostDataFromDatabase = async (postId: string) => {\r\n    let data: object | undefined | any = {};\r\n    await db.collection('post').doc(postId).get().then((snapshot) => {\r\n        data = snapshot.data();\r\n    });\r\n    await db.collection('user').doc(data.uid).get().then((snapshot) => {\r\n        data.userData = snapshot.data();\r\n    });\r\n    return data;\r\n};\r\nexport const uploadPostDataToDatabase = async (postData: PostDataInDatabase) => {\r\n    const increment = firebase.firestore.FieldValue.increment(1);\r\n    const {\r\n        category,\r\n        postId,\r\n        uid\r\n    } = postData;\r\n    await db.collection('post').doc(postId).set(postData);\r\n    await db.collection('postsByUser').doc(uid).collection('All').doc(postId).set(postData);\r\n    await db.collection('postsByUser').doc(uid).collection(category).doc(postId).set(postData);\r\n    await db.collection('user').doc(uid).update({\r\n        \"categories.All.numOfPosts\": increment,\r\n        [`categories.${category}.numOfPosts`]: increment\r\n    });\r\n};\r\n\r\ntype deletePostInputType = {\r\n    uid: string;\r\n    postId: string;\r\n    category: string;\r\n};\r\nexport const deletePostDataFromDatabase = async ({category, postId, uid}: deletePostInputType) => {\r\n    const decrement = firebase.firestore.FieldValue.increment(-1);\r\n    await db.collection('post').doc(postId).delete();\r\n    await db.collection('postsByUser').doc(uid).collection('All').doc(postId).delete();\r\n    await db.collection('postsByUser').doc(uid).collection(category).doc(postId).delete();\r\n    await db.collection('user').doc(uid).update({\r\n        \"categories.All.numOfPosts\": decrement,\r\n        [`categories.${category}.numOfPosts`]: decrement\r\n    });\r\n};\r\nexport const updatePostDataOnDatabase = async (postData: PostDataInDatabase) => {\r\n    const {\r\n        category,\r\n        postId,\r\n        uid\r\n    } = postData;\r\n    await db.collection('post').doc(postId).set(postData);\r\n    await db.collection('postsByUser').doc(uid).collection('All').doc(postId).set(postData);\r\n    await db.collection('postsByUser').doc(uid).collection(category).doc(postId).set(postData);\r\n};\r\n\r\n// comment\r\n\r\nexport const uploadComment = async (commentParams: comment, postId: string) => {\r\n    await db.collection('post').doc(postId).update({\r\n        comments: firebase.firestore.FieldValue.arrayUnion(commentParams)\r\n    });\r\n}\r\n\r\nexport const deleteComment = async (commentParams: comment, postId: string) => {\r\n    await db.collection('post').doc(postId).update({\r\n        comments: firebase.firestore.FieldValue.arrayRemove(commentParams)\r\n    });\r\n}\r\n\r\n\r\n//categoryPosts & homePosts\r\n\r\nexport const getCategoryPostsFromDatabase = async (params: getCategoryPostsParams) => {\r\n    const {\r\n        uid,\r\n        category\r\n    } = params;\r\n    let data: object | undefined | any = {};\r\n    await db.collection('postsByUser').doc(uid).collection(category).get().then((snapshot) => {\r\n        data = snapshot.docs.map(doc => doc.data());\r\n    });\r\n    await db.collection('user').doc(uid).get().then((snapshot) => {\r\n        data.map((docData: any) => {\r\n            let docDataTemp = docData;\r\n            docDataTemp.userData = snapshot.data();\r\n            return docDataTemp\r\n        });\r\n    })\r\n    return data;\r\n};\r\n\r\nconst getUserDataPromiseFromUid = (uid: string) => {\r\n    return db.collection('user').doc(uid).get().then((snapshot) => {\r\n        return snapshot.data();\r\n    });\r\n};\r\nconst getDataFromUidArray = async (data: any, uidArray: Array<string>) => {\r\n    let result = data;\r\n    for (let i = 0; i < uidArray.length; i++) {\r\n        await getUserDataPromiseFromUid(uidArray[i]).then((userData: any) => {\r\n            result.map((docData: any) => {\r\n                if (userData.email !== docData.email) return docData;\r\n                let docDataTemp = docData;\r\n                docDataTemp.userData = userData;\r\n                return docDataTemp;\r\n            });\r\n        });\r\n    }\r\n    \r\n    return result;\r\n};\r\n\r\nexport const getHomePostsFromDatabase = async () => {\r\n    let data: object | undefined | any = {};\r\n    await db.collection('post').orderBy('time', 'desc').limit(10).get().then((snapshot) => {\r\n        data = snapshot.docs.map(doc => doc.data());\r\n    });\r\n\r\n    let uidArray: Array<string> = data.map((docData: any) => docData.uid);\r\n    uidArray = Array.from(new Set(uidArray));\r\n    data = await getDataFromUidArray(data, uidArray);\r\n    return data;\r\n};\r\n\r\n/////////// Cloud Storage //////////////////////////////////////////\r\n\r\nexport const uploadImgAndUpdateDatabase = async (uid: string, file: File) => {\r\n    const fileRef = storage.ref().child(`${uid}_${file.name}`);\r\n    await fileRef.put(file);\r\n    fileRef.getDownloadURL().then(async (downloadUrl) => {\r\n        await db.collection('user').doc(uid).update({ imgUrl: downloadUrl });\r\n    });\r\n};\r\n\r\n","import { createStandardAction, ActionType } from 'typesafe-actions';\r\n\r\n/////////////// types //////////////////////\r\n\r\nconst LOAD_DIALOG = 'dialog/LOAD_DIALOG';\r\nconst REMOVE_DIALOG = 'dialog/REMOVE_DIALOG';\r\n\r\nlet nextId = 1;\r\n\r\nexport type dialogType = 'warning' | 'success';\r\n\r\n/////////////// actions /////////////////////\r\n\r\nexport const loadDialog = (dialogType: dialogType, title: string, text: string) => ({\r\n    type: LOAD_DIALOG,\r\n    payload: {\r\n        id: nextId ++,\r\n        type: dialogType,\r\n        title,\r\n        text,\r\n    }\r\n});\r\nexport const removeDialog = createStandardAction(REMOVE_DIALOG)<number>();\r\n\r\nconst actions = { loadDialog, removeDialog };\r\ntype DialogAction = ActionType<typeof actions>;\r\n\r\n////////////// state ///////////////////////\r\n\r\nexport type Dialog = {\r\n    id: number;\r\n    type: dialogType;\r\n    title: string;\r\n    text: string;\r\n}\r\n\r\ntype DialogState = Dialog[];\r\n\r\nconst initialState: DialogState = [];\r\n\r\n////////////// reducer ///////////////////////\r\n\r\nfunction dialog (\r\n    state: DialogState = initialState,\r\n    action: any\r\n): DialogState {\r\n    switch(action.type) {\r\n        case LOAD_DIALOG:\r\n            return state.concat(action.payload);\r\n        case REMOVE_DIALOG:\r\n            return state.filter(\r\n                dialog => dialog.id !== action.payload\r\n            );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dialog;","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nfunction Loader () {\r\n\r\n    return (\r\n        <div className=\"loader loader--style1\" title=\"0\">\r\n            <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n            width=\"70px\" height=\"70px\" viewBox=\"0 0 40 40\" enableBackground=\"new 0 0 40 40\" xmlSpace=\"preserve\">\r\n            <path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946\r\n                s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634\r\n                c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"/>\r\n            <path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0\r\n                C22.32,8.481,24.301,9.057,26.013,10.047z\">\r\n                <animateTransform attributeType=\"xml\"\r\n                attributeName=\"transform\"\r\n                type=\"rotate\"\r\n                from=\"0 20 20\"\r\n                to=\"360 20 20\"\r\n                dur=\"0.5s\"\r\n                repeatCount=\"indefinite\"/>\r\n                </path>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","const LOADING = 'loading/LOADING';\r\nconst LOADING_FIN = 'loading/LOADING_FIN';\r\nexport const setLoading = () => ({\r\n    type: LOADING,\r\n    payload: true\r\n});\r\nexport const finishLoading = () => ({\r\n    type: LOADING_FIN,\r\n    payload: false\r\n});\r\n\r\nconst initialState = false;\r\n\r\nexport default function loading(state: boolean = initialState, action: any) {\r\n    switch(action.type) {\r\n        case LOADING:\r\n            return action.payload;\r\n        case LOADING_FIN:\r\n            return action.payload;\r\n        default:\r\n            return initialState;\r\n    }\r\n}","import { call, put } from 'redux-saga/effects';\r\nimport { setLoading, finishLoading } from '../Modules/loading';\r\n\r\nexport const createUserSaga = (type: string, promiseCreator: any) => {\r\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n\r\n    return function* saga(action: any) {\r\n        try {\r\n            yield put(setLoading());\r\n            const result = yield call(promiseCreator, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: result\r\n            });\r\n            yield put(finishLoading());\r\n        } catch (e) {\r\n            yield put({\r\n                type: ERROR,\r\n                payload: e\r\n            })\r\n            yield put(finishLoading());\r\n        }\r\n    };\r\n}\r\n\r\nexport const createPostSaga = (type: string, promiseCreator: any) => {\r\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n    \r\n    return function* saga(action: any) {\r\n        const postId = action.meta;\r\n\r\n        try {\r\n            yield put(setLoading());\r\n            const result = yield call(promiseCreator, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: result,\r\n                meta: postId\r\n            });\r\n            yield put(finishLoading());\r\n        } catch (e) {\r\n            yield put({\r\n                type: ERROR,\r\n                payload: e,\r\n                error: true,\r\n                meta: postId\r\n            });\r\n            yield put(finishLoading());\r\n        }\r\n    }\r\n};\r\n\r\nexport const createCategoryPostsSaga = (type: string, promiseCreator: any) => {\r\n    const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n\r\n    return function* saga(action: any) {\r\n        try {\r\n            yield put(setLoading());\r\n            const result = yield call(promiseCreator, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: result,\r\n            });\r\n            yield put(finishLoading());\r\n        } catch (e) {\r\n            yield put({\r\n                type: ERROR,\r\n                payload: e\r\n            });\r\n            yield put(finishLoading());\r\n        }\r\n    }\r\n};\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Logo.scss';\r\n\r\ntype LogoProps = {\r\n    isHome: boolean;\r\n}\r\n\r\nfunction Logo({ isHome }: LogoProps) {\r\n\r\n    const className = isHome ? 'logo home' : 'logo';\r\n\r\n    return (\r\n        <Link to=\"/home\" className={className}>\r\n            Beomlog\r\n        </Link>\r\n    );\r\n}\r\n\r\nLogo.defaultProps = {\r\n    isHome: false\r\n}\r\n\r\nexport default React.memo(Logo);","import React from 'react';\r\nimport './UserInfoButton.scss';\r\n\r\ntype UserInfoButtonProps = {\r\n    imgUrl: string;\r\n    onClick: () => void;\r\n};\r\n\r\nfunction UserInfoButton({ imgUrl, onClick }: UserInfoButtonProps ) {\r\n    return (\r\n        <div className=\"user-info\" onClick={onClick}>\r\n            <img src={imgUrl} alt=\"User\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nUserInfoButton.defaultProps = {\r\n    imgUrl: \"https://ssl.pstatic.net/static/common/myarea/myInfo.gif\"\r\n}\r\n\r\nexport default React.memo(UserInfoButton);","import React from 'react';\r\nimport './HamburgerButton.scss';\r\n\r\ntype HamburgerButtonProps = {\r\n    showToggleMenu: boolean | undefined;\r\n    onClick: () => void;\r\n}\r\n\r\nfunction HamburgerButton ({ showToggleMenu, onClick }: HamburgerButtonProps) {\r\n    return (\r\n        <div id=\"menuToggle\" onClick={onClick}>\r\n            <input type=\"checkbox\" checked={showToggleMenu}/>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(HamburgerButton);","import React from 'react';\r\nimport \"./SmallButton.scss\"\r\n\r\ntype SmallButtonProps = {\r\n    isFilled: boolean;\r\n    onClick: () => void;\r\n    children: React.ReactNode;\r\n    color: \"red\" | \"green\"\r\n}\r\n\r\nfunction SmallButton ({ isFilled, onClick, color, children }: SmallButtonProps) {\r\n    const className = isFilled ? \"small-btn filled \" + color : \"small-btn \" + color;\r\n    return <button type=\"button\" onClick={onClick} className={className}>{children}</button>;\r\n}\r\n\r\nSmallButton.defaultProps = {\r\n    isFilled: false\r\n};\r\n\r\nexport default React.memo(SmallButton);","import React from 'react';\r\nimport './UserInfo.scss';\r\nimport SmallButton from './SmallButton';\r\n\r\ntype UserData = {\r\n    email: string;\r\n    name: string;\r\n    imgUrl: string;\r\n}\r\n\r\ntype UserInfoProps = {\r\n    userData?: UserData;\r\n    showUserInfo: boolean;\r\n    onClickSignOutButton: () => void;\r\n    onClickLoginButton: () => void;\r\n    onClickSettingsButton: () => void;\r\n};\r\n\r\nfunction UserInfo({\r\n    userData,\r\n    showUserInfo,\r\n    onClickSignOutButton,\r\n    onClickLoginButton,\r\n    onClickSettingsButton\r\n}: UserInfoProps) {\r\n    \r\n    return (\r\n        <div className={\"user-info-wrapper \" + (showUserInfo? \"on\" : \"off\")}>\r\n            <h3>{userData ? userData.name : null}</h3>\r\n            <p>{userData ? userData.email : null}</p>\r\n            <div className=\"user-info-button-wrapper\">\r\n                {\r\n                    userData\r\n                    ? \r\n                    <>\r\n                        <SmallButton color=\"green\" isFilled onClick={onClickSettingsButton}>Setting</SmallButton>\r\n                        <SmallButton color=\"red\" isFilled onClick={onClickSignOutButton}>Sign Out</SmallButton>\r\n                    </>\r\n                    : <SmallButton color=\"green\" isFilled onClick={onClickLoginButton}>Sign In</SmallButton>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default UserInfo;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './ToggleMenu.scss';\r\nimport { category } from '../../Container/Home/HeaderContainer';\r\nimport { MdHome, MdModeEdit, MdFiberManualRecord } from 'react-icons/md'\r\n\r\ntype ToggleMenuProps = {\r\n    showToggleMenu: boolean | undefined;\r\n    onClickMenuItem: () => void;\r\n    onClickUpload: () => void;\r\n    categories: category[];\r\n}\r\n\r\nfunction ToggleMenu({ showToggleMenu, onClickMenuItem, onClickUpload, categories }: ToggleMenuProps) {\r\n\r\n    const onOff = showToggleMenu === undefined ? '' : showToggleMenu === true ? ' on' : ' off';\r\n    \r\n    const className = \"category-list\" + onOff;\r\n\r\n    return (\r\n        <div className=\"toggle-menu-wrapper\">\r\n            <ul className={className}>\r\n                <li key=\"home\">\r\n                    <Link to=\"/home\" onClick={onClickMenuItem}>\r\n                        <MdHome /> Home\r\n                    </Link>\r\n                </li>\r\n                {\r\n                    categories.map(category => (\r\n                        <li key={category.category}>\r\n                            <Link to={`/category/${category.category}`} onClick={onClickMenuItem}>\r\n                                <MdFiberManualRecord />\r\n                                {category.category}\r\n                                <strong>\r\n                                    ({category.numOfPosts.toString()})\r\n                                </strong>\r\n                            </Link>\r\n                        </li>\r\n                    ))\r\n                }\r\n                <li key=\"upload\" onClick={onClickUpload}>\r\n                    <MdModeEdit/> Upload New\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ToggleMenu);","import React from 'react';\r\nimport \"./Darkener.scss\";\r\n\r\ntype DarkenerProps = {\r\n    showToggleMenu: boolean | undefined;\r\n}\r\n\r\nfunction Darkener ({ showToggleMenu }: DarkenerProps) {\r\n\r\n    const onOff = showToggleMenu === undefined ? '' : showToggleMenu === true ? ' on' : ' off';\r\n    \r\n    const className = \"darkener\" + onOff\r\n\r\n    return <div className={className}></div>\r\n}\r\n\r\nexport default Darkener","import React, { useState } from 'react';\r\nimport Logo from '../../Components/Shared/Logo';\r\nimport './HeaderContainer.scss';\r\nimport { signOut } from '../../api/firebase';\r\nimport { useHistory } from 'react-router-dom';\r\nimport UserInfoButton from '../../Components/Shared/UserInfoButton';\r\nimport HamburgerButton from '../../Components/Shared/HamburgerButton';\r\nimport UserInfo from '../../Components/Shared/UserInfo';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport { loadDialog } from '../../Modules/dialog';\r\nimport { removeUserData, getUserData } from '../../Modules/user';\r\nimport ToggleMenu from '../../Components/Shared/ToggleMenu';\r\nimport Darkener from '../../Components/Shared/Darkener';\r\n\r\nexport type category = {\r\n    category: string;\r\n    numOfPosts: number;\r\n};\r\n\r\ntype HeaderContainerProps = {\r\n    isHome: boolean;\r\n}\r\n\r\nfunction HeaderContainer({ isHome }: HeaderContainerProps) {\r\n\r\n    const user = useSelector((state: RootState) => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    //// state ////////////////////////\r\n\r\n    const [showUserInfo, setShowUserInfo] = useState<boolean>(false);\r\n    const [showToggleMenu, setShowToggleMenu] = useState<boolean | undefined>(undefined);\r\n    const routerHistory = useHistory();\r\n\r\n    const headerClassName = isHome ? \"home\" : \"\";\r\n\r\n    const dispatchRemoveUserData = () => {\r\n        dispatch(\r\n            removeUserData()\r\n        );\r\n    };\r\n    const dispatchSignOutSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Signed Out',\r\n                'You are signed out successfully.'\r\n            )\r\n        );\r\n    };\r\n\r\n    const onClickUserInfoButton = () => {\r\n        setShowUserInfo(!showUserInfo);\r\n    };\r\n    const onClickHamburgerButton = () => {\r\n        setShowToggleMenu(!showToggleMenu);\r\n    };\r\n    const onClickLoginButton = () => {\r\n        routerHistory.push({ pathname: '/auth' });\r\n    }\r\n    const onClickSignout = async () => {\r\n        try {\r\n            await signOut();\r\n            dispatchRemoveUserData();\r\n            dispatchSignOutSuccessDialog();\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    const onClickSettingsButton = () => {\r\n        routerHistory.push({ pathname: '/setting' });\r\n    }\r\n    const onClickMenuItem = () => {\r\n        try {\r\n            dispatch(\r\n                getUserData(\r\n                    user.uid\r\n                )\r\n            );\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        setShowToggleMenu(false);\r\n        setShowUserInfo(false);\r\n    }\r\n    const onClickUpload = () => {\r\n        if (user.uid) {\r\n            routerHistory.push({ pathname: '/upload' });\r\n        } else {\r\n            alert('Please sign in to write any post.');\r\n        }\r\n    }\r\n\r\n    /////// some useful consts //////////////\r\n    const categoriesToArray = user.categories ? Object.values(user.categories) : [];\r\n\r\n    return (\r\n        <>\r\n            <header className={headerClassName}>\r\n                <ToggleMenu\r\n                    onClickMenuItem={onClickMenuItem}\r\n                    showToggleMenu={showToggleMenu}\r\n                    categories={categoriesToArray}\r\n                    onClickUpload={onClickUpload}\r\n                />\r\n                <HamburgerButton showToggleMenu={showToggleMenu} onClick={onClickHamburgerButton}/>\r\n                <Logo isHome={isHome}/>\r\n                <UserInfoButton imgUrl={user.imgUrl} onClick={onClickUserInfoButton}/>\r\n                <UserInfo\r\n                    userData={\r\n                        user.email && user.name && user.imgUrl\r\n                        ? {\r\n                            email: user.email,\r\n                            name: user.name,\r\n                            imgUrl: user.imgUrl\r\n                        }\r\n                        : undefined\r\n                    }\r\n                    showUserInfo = {showUserInfo}\r\n                    onClickSettingsButton={onClickSettingsButton}\r\n                    onClickSignOutButton={onClickSignout}\r\n                    onClickLoginButton={onClickLoginButton}\r\n                />\r\n            </header>\r\n            <Darkener showToggleMenu={showToggleMenu}/>\r\n            <div className=\"header-behind\"></div>\r\n        </>\r\n    );\r\n}\r\n\r\nHeaderContainer.defaultProps = {\r\n    isHome: false\r\n}\r\n\r\nexport default React.memo(HeaderContainer);","import { getUserDataFromDatabase, updateUserDataOnDatabase } from \"../api/firebase\";\r\nimport { createUserSaga } from \"../lib/asyncUtils\";\r\nimport { takeEvery } from \"redux-saga/effects\";\r\nimport { category } from \"../Container/Home/HeaderContainer\";\r\n\r\nconst GET_USERDATA = 'user/GET_USERDATA';\r\nconst GET_USERDATA_SUCCESS = 'user/GET_USERDATA_SUCCESS';\r\nconst GET_USERDATA_ERROR = 'user/GET_USERDATA_ERROR';\r\nconst REMOVE_USERDATA = 'user/REMOVE_USERDATA';\r\nconst UPDATE_USERDATA = 'user/UPDATE_USERDATA';\r\nconst UPDATE_USERDATA_SUCCESS = 'user/UPDATE_USERDATA_SUCCESS';\r\nconst UPDATE_USERDATA_ERROR = 'user/UPDATE_USERDATA_ERROR';\r\n\r\nexport const getUserData = (uid: string | undefined) => ({\r\n    type: GET_USERDATA,\r\n    payload: uid,\r\n    meta: uid\r\n});\r\nexport const removeUserData = () => ({\r\n    type: REMOVE_USERDATA,\r\n    payload: {},\r\n    meta: undefined\r\n});\r\nexport const updateUserData = (userData: UserState) => ({\r\n    type: UPDATE_USERDATA,\r\n    payload: userData,\r\n    meta: undefined\r\n})\r\n\r\n///////////////// state /////////////////////////////////\r\n\r\nexport type UserState = {\r\n    uid?: string;\r\n    name?: string;\r\n    email?: string;\r\n    imgUrl?: string;\r\n    phrase?: string;\r\n    categories?: {\r\n        [category: string]: category\r\n    }\r\n}\r\nconst initialState = {}\r\n\r\n////////////// saga //////////////////////////////////////\r\n\r\nconst getUserSaga = createUserSaga(GET_USERDATA ,getUserDataFromDatabase);\r\nconst updateUserSaga = createUserSaga(UPDATE_USERDATA, updateUserDataOnDatabase);\r\n\r\nexport function* userSaga() {\r\n    yield takeEvery(GET_USERDATA, getUserSaga);\r\n    yield takeEvery(UPDATE_USERDATA, updateUserSaga);\r\n}\r\n\r\n\r\n////////////// reducer ///////////////////////////////////\r\n\r\nfunction user (\r\n    state: UserState = initialState,\r\n    action: any\r\n): UserState {\r\n    switch(action.type) {\r\n        case GET_USERDATA:\r\n            return {\r\n                ...state,\r\n                uid: action.meta\r\n            };\r\n        case GET_USERDATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        case GET_USERDATA_ERROR:\r\n            return state;\r\n        case REMOVE_USERDATA:\r\n            return initialState;\r\n        case UPDATE_USERDATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        case UPDATE_USERDATA_SUCCESS:\r\n            return state;\r\n        case UPDATE_USERDATA_ERROR:\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default user;","import React, { useState } from 'react';\r\nimport Input from '../../Components/Shared/Input';\r\nimport Button from '../../Components/Shared/Button';\r\nimport './FormContainer.scss';\r\nimport { signIn } from '../../api/firebase';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loadDialog } from '../../Modules/dialog';\r\nimport Loader from '../../Components/Shared/Loader';\r\nimport { getUserData } from '../../Modules/user';\r\nimport firebase from 'firebase';\r\n\r\ntype FormValue = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nfunction FormContainer() {\r\n\r\n    const routerHistory = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const dispatchSignInSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Signed In',\r\n                'You are signed in successfully.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchSignInWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Error',\r\n                'There was an error signing you in. Please try again.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchCurrentUser = (uid: string | undefined) => {\r\n        dispatch(\r\n            getUserData(uid)\r\n        );\r\n    };\r\n\r\n    /////// useState ///////////////////\r\n\r\n    const initialValuesState: FormValue = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n\r\n    const [values, setValues] = useState<FormValue>(initialValuesState);\r\n    const [isValid, setIsValid] = useState<boolean | null>(null);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    /////// functions /////////////////\r\n\r\n    const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if(values.password.length >= 8) {\r\n            setIsValid(true);\r\n            setIsLoading(true);\r\n            try {\r\n                await signIn(values.email, values.password);\r\n                dispatchSignInSuccessDialog();\r\n                dispatchCurrentUser(firebase.auth().currentUser?.uid);\r\n                setIsLoading(false);\r\n                routerHistory.push({ pathname: '/home' });\r\n            } catch (e) {\r\n                dispatchSignInWarningDialog();\r\n                setIsLoading(false);\r\n            }\r\n        } else {\r\n            setIsValid(false);\r\n            dispatchSignInWarningDialog();\r\n        }\r\n        setValues(initialValuesState);\r\n    }\r\n\r\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValues({\r\n            ...values,\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n\r\n    return (\r\n    isLoading\r\n    ? <Loader />\r\n    : <form onSubmit={onSubmit}>\r\n        <div className=\"input-container\">\r\n            <Input\r\n                id=\"email\"\r\n                onChange={onChange}\r\n                value={values.email}\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                isValid={isValid}\r\n            />\r\n            <Input\r\n                id=\"password\"\r\n                onChange={onChange}\r\n                value={values.password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                isValid={isValid}\r\n            />\r\n        </div>\r\n        <div className=\"button-container\">\r\n            <Button type=\"submit\" isFilled>Sign In</Button>\r\n        </div>\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default FormContainer;","import React from 'react';\r\nimport './LoginPage.scss';\r\nimport FormContainer from '../Container/Login/FormContainer';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction LoginPage() {\r\n    return (\r\n        <div className=\"login-page\">\r\n            <div className=\"login-container inner\">\r\n                <h1>Beomlog</h1>\r\n                <FormContainer />\r\n                <div className=\"link-to-container\">\r\n                    Don't have an account? <Link to=\"/auth/register\">Sign Up</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import React, { useState, useEffect } from 'react';\r\nimport { Dialog, removeDialog } from '../../Modules/dialog';\r\nimport './Dialog.scss';\r\nimport { useDispatch } from 'react-redux';\r\n\r\ntype DialogProps = Dialog & {\r\n    onClick: (id: number) => void\r\n}\r\n\r\nfunction DialogComponent (\r\n    { id, type, title, text, onClick }: DialogProps\r\n) {\r\n\r\n    const className = `dialog ${type}`;\r\n    const handleRemove = () => onClick(id);\r\n    const dispatch = useDispatch();\r\n\r\n    const [showComponent, setShowComponent] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setShowComponent(false);\r\n            dispatch(removeDialog(id));\r\n        }, 5000);\r\n        return () => clearTimeout(timer);\r\n    })\r\n\r\n    return showComponent ? (\r\n        <li key={id} className={className}>\r\n            <button onClick={handleRemove}>x</button>\r\n            <h2>{title}</h2>\r\n            <p>{text}</p>\r\n        </li>\r\n    ) : null;\r\n}\r\n\r\nexport default DialogComponent;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport { removeDialog } from '../../Modules/dialog';\r\nimport DialogComponent from '../../Components/Shared/Dialog';\r\nimport './DialogContainer.scss';\r\n\r\nfunction DialogContainer () {\r\n\r\n    const dialogs = useSelector((state: RootState) => state.dialog);\r\n    const dispatch = useDispatch();\r\n\r\n    ////// dispatching actions ////////////\r\n\r\n    const onRemove = (id: number) => {\r\n        dispatch(removeDialog(id));\r\n    };\r\n\r\n    return (\r\n        <ul className=\"dialog-container\">\r\n            {\r\n                dialogs.map(dialog => (\r\n                    <DialogComponent\r\n                        key={dialog.id}\r\n                        id={dialog.id}\r\n                        type={dialog.type}\r\n                        title={dialog.title}\r\n                        text={dialog.text}\r\n                        onClick={onRemove}\r\n                    />\r\n                ))\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default DialogContainer;","import React, { useEffect, useState } from 'react';\r\nimport { CategoryPostsState } from '../../Modules/categoryPosts';\r\nimport './CategoryPostsList.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ntype CategoryPostsListProps = {\r\n    categoryPosts: CategoryPostsState;\r\n}\r\n\r\nfunction NoPostWrapper() {\r\n\r\n    const [showNoPost, setShowNoPost] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShowNoPost(true);\r\n        }, 500)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showNoPost\r\n                ? <div className=\"no-post-wrapper\">\r\n                    <div className=\"no-post-img\">No Post Image</div>\r\n                    <h2>There is no post here!</h2>\r\n                    <h3>Write your post here!</h3>\r\n                </div>\r\n                : false\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nfunction CategoryPostsList({ categoryPosts }: CategoryPostsListProps ) {\r\n\r\n    return (\r\n        <ul className=\"category-posts-list\">\r\n            {\r\n                categoryPosts.length === 0\r\n                ? <NoPostWrapper />\r\n                : categoryPosts.map(post => (\r\n                    <li key={post.postId}>\r\n                        <Link to={`/post/${post.postId}`}>\r\n                            <div className=\"list-category-container\">{post.category}</div>\r\n                            <div className=\"list-postdata-container\">\r\n                                <h3>{post.title}</h3>\r\n                                <p dangerouslySetInnerHTML={{__html: post.editorData}}></p>\r\n                            </div>\r\n                            <div className=\"list-userdata-container\">\r\n                                <div className=\"position-fixer\">\r\n                                    <img src={post.userData.imgUrl} alt=\"profile img\"/>\r\n                                    <div>{post.userData.name}</div>\r\n                                </div>\r\n                            </div>\r\n                        </Link>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default CategoryPostsList;","import { category } from \"../Container/Home/HeaderContainer\";\r\nimport { createCategoryPostsSaga } from \"../lib/asyncUtils\";\r\nimport { takeEvery } from \"redux-saga/effects\";\r\nimport { getCategoryPostsFromDatabase, getHomePostsFromDatabase } from \"../api/firebase\";\r\n\r\n\r\nconst GET_POSTS = 'categoryPosts/GET_POSTS';\r\nconst GET_POSTS_SUCCESS = 'categoryPosts/GET_POSTS_SUCCESS';\r\nconst GET_POSTS_ERROR = 'categoryPosts/GET_POSTS_ERROR';\r\n\r\nconst GET_HOME_POSTS = 'categoryPosts/GET_HOME_POSTS';\r\nconst GET_HOME_POSTS_SUCCESS = 'categoryPosts/GET_HOME_POSTS_SUCCESS';\r\nconst GET_HOME_POSTS_ERROR = 'categoryPosts/GET_HOME_POSTS_ERROR';\r\n\r\nconst DELETE_POSTS = 'categoryPosts/DELETE_POSTS';\r\n\r\nexport type getCategoryPostsParams = {\r\n    uid: string,\r\n    category: string\r\n};\r\nexport const getCategoryPosts = (params: getCategoryPostsParams) => ({\r\n    type: GET_POSTS,\r\n    payload: params\r\n});\r\nexport const getHomePosts = () => ({\r\n    type: GET_HOME_POSTS\r\n});\r\nexport const deleteCategoryPosts = () => ({\r\n    type: DELETE_POSTS\r\n})\r\n\r\n////////// state ////////////////////\r\ntype categoryPost = {\r\n    category: string;\r\n    editorData: string;\r\n    postId: string;\r\n    time: any;\r\n    title: string;\r\n    userData: {\r\n        email: string,\r\n        name: string,\r\n        imgUrl: string,\r\n        phrase: string,\r\n        categories: {\r\n            [category: string]: category\r\n        }\r\n    };\r\n}\r\nexport type CategoryPostsState = categoryPost[]\r\nconst initialState: CategoryPostsState = [];\r\n\r\n//////////// saga ////////////////////////////\r\n\r\nconst getCategoryPostsSaga = createCategoryPostsSaga(GET_POSTS, getCategoryPostsFromDatabase);\r\nconst getHomePostsSaga = createCategoryPostsSaga(GET_HOME_POSTS, getHomePostsFromDatabase);\r\n\r\nexport function* categoryPostsSaga() {\r\n    yield takeEvery(GET_POSTS, getCategoryPostsSaga);\r\n    yield takeEvery(GET_HOME_POSTS, getHomePostsSaga);\r\n}\r\n\r\n////////// reducer ////////////////////////////\r\n\r\n\r\nexport default function categoryPosts(state: CategoryPostsState = initialState, action: any): CategoryPostsState {\r\n    switch(action.type) {\r\n        case GET_POSTS:\r\n            return initialState;\r\n        case GET_POSTS_SUCCESS:\r\n            return action.payload;\r\n        case GET_POSTS_ERROR:\r\n            return initialState;\r\n        case GET_HOME_POSTS:\r\n            return initialState;\r\n        case GET_HOME_POSTS_SUCCESS:\r\n            return action.payload;\r\n        case GET_HOME_POSTS_ERROR:\r\n            return initialState;\r\n        case DELETE_POSTS:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport Loader from '../../Components/Shared/Loader';\r\nimport CategoryPostsList from '../../Components/CategoryPage/CategoryPostsList';\r\nimport { CategoryPostsState, getHomePosts } from '../../Modules/categoryPosts';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport './HomePostsContainer.scss';\r\n\r\n\r\nfunction HomePostsContainer() {\r\n\r\n    const homePosts: CategoryPostsState = useSelector((state: RootState) => state.categoryPosts);\r\n    const loading = useSelector((state: RootState) => state.loading);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        try {\r\n            dispatch(\r\n                getHomePosts()\r\n            );\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"home-posts-container inner\">\r\n            {\r\n                loading\r\n                ? <Loader />\r\n                : <>\r\n                    <h2>\r\n                        Latest posts\r\n                    </h2>\r\n                    <CategoryPostsList categoryPosts={homePosts}/>\r\n                </>\r\n\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePostsContainer;","import React from 'react';\r\nimport \"./NewPostButton.scss\";\r\n\r\ntype NewPostButtonProps = {\r\n    onClick: () => void;\r\n};\r\n\r\nfunction NewPostButton({ onClick }: NewPostButtonProps) {\r\n\r\n    return (\r\n        <div className=\"new-post-button-wrapper inner\">\r\n            <button className=\"new-post-button\" onClick={onClick}>\r\n                Write New Post\r\n            </button>\r\n        </div>\r\n    );\r\n            \r\n}\r\n\r\nexport default NewPostButton;","import React from 'react';\r\nimport \"./Intro.scss\";\r\n\r\ntype IntroProps = {\r\n    isSignedIn: boolean;\r\n    name?: string;\r\n};\r\n\r\nfunction Intro({ isSignedIn, name }: IntroProps) {\r\n\r\n    const h1Content = !isSignedIn ? 'Welcome to Beomlog!' : `Welcome, ${name}`;\r\n    const pContent = !isSignedIn ? 'Create an accound and' : 'Click the button below and';\r\n\r\n    return (\r\n        <div className=\"intro-welcome\">\r\n            <div className=\"inner\">\r\n                <div className=\"inner-left\">\r\n                    <h1>{h1Content}</h1>\r\n                    <p>{pContent}</p>\r\n                    <p><strong>Start writing a post!</strong></p>\r\n                </div>\r\n                <div className=\"inner-right\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nIntro.defaultProps = {\r\n    isSignedIn: false\r\n}\r\n\r\nexport default Intro;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport './HomeIntroContainer.scss';\r\nimport NewPostButton from '../../Components/HomePage/NewPostButton';\r\nimport Intro from '../../Components/HomePage/Intro';\r\n\r\nfunction HomeIntroContainer() {\r\n\r\n    const user = useSelector((state: RootState) => state.user);\r\n    const routerHistory = useHistory();\r\n\r\n    const onClickHomeIntroButton = () => {\r\n        if (user.uid) {\r\n            routerHistory.push({ pathname: '/upload' });\r\n        } else {\r\n            alert('Please sign in to write any post.');\r\n        }\r\n    };\r\n\r\n    const intro = user.name ? <Intro isSignedIn name={user.name} /> : <Intro />;\r\n\r\n    return (\r\n        <section className=\"section--home-intro\">\r\n            {intro}\r\n            <NewPostButton onClick={onClickHomeIntroButton}/>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default HomeIntroContainer;","import React from 'react';\r\nimport HeaderContainer from '../Container/Home/HeaderContainer';\r\nimport HomePostsContainer from '../Container/Home/HomePostsContainer';\r\nimport HomeIntroContainer from '../Container/Home/HomeIntroContainer';\r\n\r\nfunction HomePage() {\r\n\r\n    return (\r\n        <>\r\n            <HeaderContainer isHome/>\r\n            <HomeIntroContainer />\r\n            <HomePostsContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React, { useState } from 'react';\r\nimport Input from '../../Components/Shared/Input';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { signUp } from '../../api/firebase';\r\nimport { loadDialog } from '../../Modules/dialog';\r\nimport Button from '../../Components/Shared/Button';\r\nimport Loader from '../../Components/Shared/Loader';\r\n\r\ntype RegisterFormValue = {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    checkPassword: string;\r\n\r\n}\r\n\r\nconst URL_TEMPORARY = 'https://ssl.pstatic.net/static/common/myarea/myInfo.gif';\r\n\r\nfunction RegisterFormContainer() {\r\n    \r\n    const routerHistory = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const dispatchSignUpSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Signed Up',\r\n                'You are singed up successfully.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchSignUpWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Error',\r\n                'There was an error signing you up. Please try again.'\r\n            )\r\n        );\r\n    };\r\n\r\n    /////// state /////////////////////////////////////\r\n\r\n    const initialValueState: RegisterFormValue = {\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        checkPassword: ''\r\n    }\r\n\r\n    const [values,setValues] = useState<RegisterFormValue>(initialValueState);\r\n    const [isValid, setIsValid] = useState<boolean | null>(null);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [matchPassword, setMatchPassword] = useState<boolean>(false);\r\n\r\n    ///////// functions //////////////////////////////\r\n\r\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(event.target.id === 'checkPassword') {\r\n            if(event.target.value === values.password) {\r\n                setMatchPassword(true);\r\n            } else {\r\n                setMatchPassword(false);\r\n            }\r\n        }\r\n        setValues({\r\n            ...values,\r\n            [event.target.id]: event.target.value\r\n        });\r\n        \r\n    }\r\n\r\n    const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if(values.password.length >= 8\r\n            && values.name.length >= 2\r\n            && matchPassword) {\r\n                setIsValid(true);\r\n                setIsLoading(true);\r\n                try {\r\n                    await signUp(\r\n                        values.email,\r\n                        values.password,\r\n                        {\r\n                            name: values.name,\r\n                            email: values.email,\r\n                            imgUrl: URL_TEMPORARY,\r\n                            phrase: \"\",\r\n                            categories: {\r\n                                'No Category': {\r\n                                    category: 'No Category',\r\n                                    numOfPosts: 0\r\n                                },\r\n                                'All': {\r\n                                    category: 'All',\r\n                                    numOfPosts: 0\r\n                                }\r\n                            }\r\n                        }\r\n                    );\r\n                    setIsLoading(false);\r\n                    dispatchSignUpSuccessDialog();\r\n                    routerHistory.push({ pathname: '/auth' });\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    setIsLoading(false);\r\n                    dispatchSignUpWarningDialog();\r\n                }\r\n                setValues(initialValueState);\r\n        } else {\r\n            setIsValid(false);\r\n            setMatchPassword(false);\r\n            dispatchSignUpWarningDialog();\r\n            setValues(\r\n                {\r\n                    ...values,\r\n                    password: '',\r\n                    checkPassword: ''\r\n                }\r\n            )\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        isLoading\r\n        ? <Loader />\r\n        : <form onSubmit={onSubmit}>\r\n            <div className=\"input-container\">\r\n                <Input\r\n                    id=\"name\"\r\n                    onChange={onChange}\r\n                    value={values.name}\r\n                    type=\"name\"\r\n                    placeholder=\"Nickname\"\r\n                    isValid={isValid}\r\n                />\r\n                <Input \r\n                    id=\"email\"\r\n                    onChange={onChange}\r\n                    value={values.email}\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    isValid={isValid}\r\n                />\r\n                <Input\r\n                    id=\"password\"\r\n                    onChange={onChange}\r\n                    value={values.password}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    isValid={isValid}\r\n                />\r\n                <Input \r\n                    id=\"checkPassword\"\r\n                    onChange={onChange}\r\n                    value={values.checkPassword}\r\n                    type=\"password\"\r\n                    placeholder=\"Check Password\"\r\n                    isValid={matchPassword}\r\n                />\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <Button type=\"submit\" isFilled>Sign Up</Button>\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nexport default RegisterFormContainer;","import React from 'react';\r\nimport './LoginPage.scss';\r\nimport RegisterFormContainer from '../Container/Register/RegisterFormContainer';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction RegisterPage () {\r\n    return (\r\n        <div className=\"login-page\">\r\n            <div className=\"inner\">\r\n                <h1>Beomlog</h1>\r\n                <RegisterFormContainer />\r\n                <div className=\"link-to-container\">\r\n                    Already have an account? <Link to=\"/auth\">Sign In</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegisterPage;","import React, { useEffect } from 'react';\r\nimport { CategoryPostsState, getCategoryPosts } from '../../Modules/categoryPosts';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport { UserState, getUserData } from '../../Modules/user';\r\nimport CategoryPostsList from '../../Components/CategoryPage/CategoryPostsList';\r\nimport Loader from '../../Components/Shared/Loader';\r\n\r\ntype CategoryPostsContainerProps = {\r\n    category: string;\r\n}\r\n\r\nfunction CategoryPostsContainer({\r\n    category\r\n}: CategoryPostsContainerProps) {\r\n\r\n    const categoryPosts: CategoryPostsState = useSelector((state: RootState) => state.categoryPosts);\r\n    const user: UserState = useSelector((state: RootState) => state.user);\r\n    const loading = useSelector((state: RootState) => state.loading);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        try {\r\n            dispatch(\r\n                getCategoryPosts(\r\n                    {\r\n                        uid: user.uid!,\r\n                        category: category\r\n                    }\r\n                )\r\n            );\r\n            dispatch(\r\n                getUserData(\r\n                    user.uid\r\n                )\r\n            );\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [dispatch, category, user.uid]);\r\n\r\n    return (\r\n        <div className=\"category-posts-container\">\r\n            {\r\n                loading\r\n                ? <Loader />\r\n                : <CategoryPostsList categoryPosts={categoryPosts}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CategoryPostsContainer;","import React from 'react';\r\nimport \"./CategoryInfoContainer.scss\";\r\nimport SmallButton from '../../Components/Shared/SmallButton';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\n\r\ntype CategoryInfoContainerProps = {\r\n    category: string;\r\n}\r\n\r\nfunction CategoryInfoContainer({ category }: CategoryInfoContainerProps) {\r\n\r\n    const routerHistory = useHistory();\r\n    const user = useSelector((state: RootState) => state.user);\r\n\r\n    const onClick = () => {\r\n        if (user.uid) {\r\n            alert('Please sign in to write any post.');\r\n        } else {\r\n            routerHistory.push({ pathname: '/upload' });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"category-info-container\">\r\n            <h2>\r\n                {category}\r\n            </h2>\r\n            <SmallButton isFilled onClick={onClick} color=\"green\">New Post</SmallButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CategoryInfoContainer;","import React from 'react';\r\nimport HeaderContainer from '../Container/Home/HeaderContainer';\r\nimport CategoryPostsContainer from '../Container/Category/CategoryPostsContainer';\r\nimport CategoryInfoContainer from '../Container/Category/CategoryInfoContainer';\r\n\r\nfunction CategoryPage({ match }: any) {\r\n\r\n    const { category } = match.params;\r\n\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <div className=\"inner\">\r\n                <CategoryInfoContainer category={category}/>\r\n                <CategoryPostsContainer category={category} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CategoryPage;","import { getPostDataFromDatabase, uploadPostDataToDatabase, deletePostDataFromDatabase, updatePostDataOnDatabase } from \"../api/firebase\";\r\nimport { createPostSaga } from \"../lib/asyncUtils\";\r\nimport { takeEvery } from \"redux-saga/effects\";\r\nimport { category } from \"../Container/Home/HeaderContainer\";\r\n\r\nconst UPLOAD_POST = 'post/UPLOAD_POST';\r\nconst UPLOAD_POST_SUCCESS = 'post/UPLOAD_POST_SUCCESS';\r\nconst UPLOAD_POST_ERROR = 'post/UPLOAD_POST_ERROR';\r\n\r\nconst GET_POST = 'post/GET_POST';\r\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\r\nconst GET_POST_ERROR = 'post/GET_POST_ERROR';\r\n\r\nconst DELETE_POST = 'post/DELETE_POST';\r\nconst DELETE_POST_SUCCESS = 'post/DELETE_POST_SUCCESS';\r\nconst DELETE_POST_ERROR = 'post/DELETE_POST_ERROR';\r\n\r\nconst UPDATE_POST = 'post/UPDATE_POST';\r\nconst UPDATE_POST_SUCCESS = 'post/UPDATE_POST_SUCCESS';\r\nconst UPDATE_POST_ERROR = 'post/UPDATE_POST_ERROR';\r\n\r\nconst COMMENT_UPDATE = 'post/COMMENT_UPDATE';\r\nconst COMMENT_DELETE = 'post/COMMENT_DELETE';\r\n\r\nexport const uploadPost = (post: PostDataInDatabase) => ({\r\n    type: UPLOAD_POST,\r\n    payload: post,\r\n    meta: post.postId\r\n});\r\nexport const getPost = (postId: string) => ({\r\n    type: GET_POST,\r\n    payload: postId,\r\n    meta: postId\r\n});\r\nexport const deletePost = (uid: string, postId: string, category: string) => ({\r\n    type: DELETE_POST,\r\n    payload: {\r\n        uid,\r\n        postId,\r\n        category\r\n    },\r\n    meta: postId\r\n});\r\nexport const updatePost = (\r\n    post: PostDataInDatabase\r\n) => ({\r\n    type: UPLOAD_POST,\r\n    payload: post,\r\n    meta: post.postId\r\n});\r\nexport const updateCommentOnPostState = (comment: comment) => ({\r\n    type: COMMENT_UPDATE,\r\n    payload: comment\r\n});\r\nexport const deleteCommentOnPostState = (commentContent: string) => ({\r\n    type: COMMENT_DELETE,\r\n    payload: commentContent\r\n})\r\n\r\n///////////////////// state /////////////////////////\r\n\r\nexport type comment = {\r\n    uid: string;\r\n    nickname: string;\r\n    comment: string;\r\n    time: any;\r\n}\r\n\r\nexport type PostDataInDatabase = {\r\n    postId: string;\r\n    title: string;\r\n    editorData: string;\r\n    category: string;\r\n    uid: string; //writer uid\r\n    time: any;\r\n    email: string;\r\n    comments: comment[];\r\n}\r\n\r\nexport type Post = PostDataInDatabase & {\r\n    userData: {\r\n        email: string,\r\n        name: string,\r\n        imgUrl: string,\r\n        phrase: string,\r\n        categories: {\r\n            [category: string]: category\r\n        }\r\n    };\r\n};\r\n\r\nexport type PostState = Post & {\r\n    error: any | null | undefined;\r\n};\r\nconst initialState: PostState = {\r\n    postId: '',\r\n    title: '',\r\n    editorData: '',\r\n    category: '',\r\n    uid: '',\r\n    time: '',\r\n    email: '',\r\n    comments: [],\r\n    userData: {\r\n        phrase: '',\r\n        email: '',\r\n        name: '',\r\n        imgUrl: '',\r\n        categories: {}\r\n    },\r\n    error: undefined\r\n}\r\n\r\n//////////////// saga /////////////////////////////////\r\n\r\nconst getPostSaga = createPostSaga(GET_POST, getPostDataFromDatabase);\r\nconst uploadPostSaga = createPostSaga(UPLOAD_POST, uploadPostDataToDatabase);\r\nconst deletePostSaga = createPostSaga(DELETE_POST, deletePostDataFromDatabase);\r\nconst updatePostSaga = createPostSaga(UPDATE_POST, updatePostDataOnDatabase);\r\n\r\nexport function* postSaga() {\r\n    yield takeEvery(GET_POST, getPostSaga);\r\n    yield takeEvery(UPLOAD_POST, uploadPostSaga);\r\n    yield takeEvery(DELETE_POST, deletePostSaga);\r\n    yield takeEvery(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\n/////////////// reducer /////////////////////////////////\r\n\r\nexport default function post(state: PostState = initialState, action: any): PostState {\r\n    switch(action.type) {\r\n        case GET_POST:\r\n            return {\r\n                ...initialState,\r\n                postId: action.meta\r\n            };\r\n        case GET_POST_SUCCESS:\r\n            return {\r\n                ...action.payload,\r\n                error: null\r\n            };\r\n        case GET_POST_ERROR:\r\n            return {\r\n                ...initialState,\r\n                error: action.payload\r\n            };\r\n        case UPLOAD_POST:\r\n            return {\r\n                ...action.payload,\r\n                error: undefined\r\n            };\r\n        case UPLOAD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                error: null\r\n            };\r\n        case UPLOAD_POST_ERROR:\r\n            return {\r\n                ...initialState,\r\n                error: action.payload\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...initialState,\r\n                error: undefined\r\n            };\r\n        case DELETE_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                error: null\r\n            };\r\n        case DELETE_POST_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            };\r\n        case UPDATE_POST:\r\n            return {\r\n                ...action.payload,\r\n                error: undefined\r\n            };\r\n        case UPDATE_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                error: null\r\n            };\r\n        case UPDATE_POST_ERROR:\r\n            return {\r\n                ...initialState,\r\n                error: action.payload\r\n            };\r\n        case COMMENT_UPDATE:\r\n            return {\r\n                ...state,\r\n                comments: [\r\n                    ...state.comments,\r\n                    action.payload\r\n                ]\r\n            };\r\n        case COMMENT_DELETE:\r\n            return {\r\n                ...state,\r\n                comments: state.comments.filter(comment => comment.comment !== action.payload)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport \"./NoPostWrapper.scss\";\r\n\r\nfunction NoPostWrapper() {\r\n    const [showNoPost, setShowNoPost] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShowNoPost(true);\r\n        }, 500);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showNoPost\r\n                ? <div className=\"no-postdata-wrapper\">\r\n                    <div className=\"no-postdata-img\">No Postdata Image</div>\r\n                    <h2>The post does not exist!</h2>\r\n                    <h3>Please check the postId!</h3>\r\n                </div>\r\n                : null\r\n            }\r\n        </>\r\n    );    \r\n}\r\n\r\nexport default NoPostWrapper;","import React, { useEffect, useState } from 'react';\r\nimport { PostState, getPost, deletePost, comment, updateCommentOnPostState, deleteCommentOnPostState } from '../../Modules/post';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport './PostContainer.scss';\r\nimport Loader from '../../Components/Shared/Loader';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { loadDialog } from '../../Modules/dialog';\r\nimport { getUserData } from '../../Modules/user';\r\nimport SmallButton from '../../Components/Shared/SmallButton';\r\nimport { uploadComment, deleteComment } from '../../api/firebase';\r\nimport { MdDeleteForever } from \"react-icons/md\";\r\nimport NoPostWrapper from '../../Components/PostPage/NoPostWrapper';\r\n\r\ntype PostContainerProps = {\r\n    postId: string\r\n}\r\n\r\nfunction PostContainer({ postId }: PostContainerProps) {\r\n\r\n    const post: PostState = useSelector((state: RootState) => state.post);\r\n    const user = useSelector((state: RootState) => state.user);\r\n    const loading = useSelector((state: RootState) => state.loading);\r\n    const dispatch = useDispatch();\r\n    const routerHistory = useHistory();\r\n\r\n    const [comment, setComment] = useState('');\r\n    const [isUploadingComment, setIsUploadingComment] = useState(false);\r\n\r\n    const isWriter = user && (user.uid === post.uid);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            dispatch(\r\n                getPost(postId)\r\n            );\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [dispatch, postId]);\r\n\r\n\r\n    //////// dispatch messages /////////////\r\n\r\n    const dispatchDeleteSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Delete Complete',\r\n                'The post is deleted successfully.'\r\n            )\r\n        );\r\n    };\r\n\r\n    const dispatchDeleteWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Delete Failed',\r\n                'An error has occured. Please try again.'\r\n            )\r\n        );\r\n    };\r\n\r\n    const dispatchCommentUploadSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Comment Uploaded',\r\n                'Comment is uploaded.'\r\n            )\r\n        );\r\n    };\r\n\r\n    const dispatchCommentUploadWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Comment Upload Failed',\r\n                'There was an error uploading comment. Please try again.'\r\n            )\r\n        )\r\n    }\r\n    const dispatchCommentDeleteSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Comment Deleted',\r\n                'Comment is deleted.'\r\n            )\r\n        );\r\n    };\r\n\r\n    const dispatchCommentDeleteWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Comment Delete Failed',\r\n                'There was an error deleting comment. Please try again.'\r\n            )\r\n        )\r\n    }\r\n\r\n    //////// onclick methods ///////////////\r\n\r\n    const onClickDeleteButton = () => {\r\n        try {\r\n            dispatch(\r\n                deletePost(\r\n                    user.uid?user.uid:'',\r\n                    postId,\r\n                    post.category\r\n                )\r\n            );\r\n            dispatch(\r\n                getUserData(\r\n                    user.uid\r\n                )\r\n            );\r\n            dispatchDeleteSuccessDialog();\r\n            routerHistory.push({ pathname: '/home' });\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatchDeleteWarningDialog();\r\n        }\r\n    };\r\n\r\n    const onClickEditButton = () => {\r\n        routerHistory.push({ pathname: '/update' })\r\n    }\r\n\r\n    const onChangeCommentInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setComment(event.target.value);\r\n    \r\n    }\r\n\r\n    const onSubmitComment = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const time = new Date();\r\n        \r\n        if (!user.uid) {\r\n            alert('You have to sign in to leave a comment.');\r\n        } else if (user.uid && user.name) {\r\n            const commentData = {\r\n                comment,\r\n                uid: user.uid,\r\n                nickname: user.name,\r\n                time\r\n            }\r\n            setIsUploadingComment(true);\r\n            try {\r\n                uploadComment(\r\n                    commentData,\r\n                    postId\r\n                );\r\n                dispatch(updateCommentOnPostState(commentData));\r\n                dispatchCommentUploadSuccessDialog();\r\n                setIsUploadingComment(false);\r\n            } catch (e) {\r\n                console.log(e);\r\n                dispatchCommentUploadWarningDialog();\r\n                setIsUploadingComment(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onClickCommentDeleteButton = (comment: comment) => {\r\n        setIsUploadingComment(true);\r\n        try {\r\n            deleteComment(\r\n                comment,\r\n                postId\r\n            );\r\n            dispatch(deleteCommentOnPostState(comment.comment));\r\n            dispatchCommentDeleteSuccessDialog();\r\n            setIsUploadingComment(false);\r\n        } catch (e) {\r\n            dispatchCommentDeleteWarningDialog();\r\n            setIsUploadingComment(false);\r\n        }\r\n    }\r\n\r\n\r\n    const time = post.time ? post.time.toDate().toString() : null;\r\n\r\n    const commentSection = isUploadingComment ? <Loader /> : (\r\n        <section className=\"section--comments\">\r\n            <h3>댓글 <strong>({post.comments.length})</strong></h3>\r\n            <ul className=\"comments-wrapper\">\r\n                {\r\n                    post.comments.map((comment: comment) => (\r\n                        <li>\r\n                            <div className=\"nickname\">{comment.nickname}</div>\r\n                            <div className=\"comment\">{comment.comment}</div>\r\n                            {\r\n                                user.uid === comment.uid\r\n                                ? <button className=\"comment-delete-button\" onClick={() => onClickCommentDeleteButton(comment)}>\r\n                                    <MdDeleteForever />\r\n                                </button>\r\n                                : null\r\n                            }\r\n                        </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n            <h3>댓글 달기</h3>\r\n            <form className=\"comment-form\" onSubmit={onSubmitComment}>\r\n                <textarea\r\n                    rows={5} cols={60}\r\n                    value={comment}\r\n                    onChange={onChangeCommentInput}\r\n                    className=\"comment-input\"\r\n                    maxLength={100}\r\n                >\r\n                </textarea>\r\n                <button className=\"comment-button\" type=\"submit\">Submit</button>\r\n            </form>\r\n        </section>\r\n    );\r\n\r\n    const buildBody = (\r\n        <>\r\n            <div className=\"category\">{post.category}</div>\r\n            <h1>\r\n                {post.title}\r\n                <div className=\"written-time\">{time}</div>\r\n            </h1>\r\n            <section className=\"section--content\">\r\n                <div \r\n                    className=\"content-wrapper\"\r\n                    dangerouslySetInnerHTML={{__html: post.editorData}}\r\n                >\r\n                </div>\r\n                {isWriter\r\n                    ? <div className=\"buttons-wrapper\">\r\n                        <SmallButton onClick={onClickEditButton} color=\"green\">Edit Post</SmallButton>\r\n                        <SmallButton onClick={onClickDeleteButton} color=\"red\">Delete</SmallButton>\r\n                    </div>\r\n                    : null\r\n                }\r\n                <div className=\"post-user-info-wrapper\">\r\n                    <img src={post.userData.imgUrl} alt=\"profile\"/>\r\n                    <div className=\"user-data\">\r\n                        <div className=\"nickname\">{post.userData.name}</div>\r\n                        <div className=\"email\">{post.userData.email}</div>\r\n                        <div className=\"phrase\">{post.userData.phrase}</div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            {commentSection}\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"post-container inner\">\r\n            {\r\n                loading\r\n                ? <Loader />\r\n                : (\r\n                    post.uid\r\n                    ? buildBody\r\n                    : <NoPostWrapper />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default PostContainer;","import React from 'react';\r\nimport PostContainer from '../Container/Post/PostContainer';\r\nimport HeaderContainer from '../Container/Home/HeaderContainer';\r\n\r\nfunction PostPage({ match }: any) {\r\n    \r\n    const { postId } = match.params;\r\n    \r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <PostContainer postId={postId} />\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default PostPage;","import React from 'react';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nfunction Editor({ onChange, data }) {\r\n    return (\r\n        <CKEditor\r\n            editor={ ClassicEditor }\r\n            data={data}\r\n            onChange={onChange}\r\n            \r\n        />\r\n    );\r\n}\r\n\r\nEditor.defaultProps = {\r\n    data: \"\"\r\n};\r\n\r\nexport default Editor;","import React, { useState, useEffect } from 'react';\r\nimport \"./InvalidAccess.scss\";\r\n\r\nfunction InvalidAccess () {\r\n    const [showInvalid, setShowInvalid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setShowInvalid(true);\r\n        }, 500);\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {\r\n                showInvalid\r\n                ? <div className=\"invalid-wrapper\">\r\n                    <div className=\"invalid-img\">Invalid Access Image</div>\r\n                    <h2>Invalid Access</h2>\r\n                    <h3>The access is not valid.</h3>\r\n                </div>\r\n                : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InvalidAccess;","import React, { useState } from 'react';\r\nimport Editor from '../../Components/WritingPage/Editor';\r\nimport './EditorContainer.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport { uploadPost, updatePost } from '../../Modules/post';\r\nimport Loader from '../../Components/Shared/Loader';\r\nimport { loadDialog } from '../../Modules/dialog';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getUserData } from '../../Modules/user';\r\nimport Button from '../../Components/Shared/Button';\r\nimport \"./EditorContainer.scss\";\r\nimport InvalidAccess from '../../Components/Shared/InvalidAccess';\r\n\r\ntype EditorContainerProps = {\r\n    isUpdating: boolean;\r\n}\r\n\r\nfunction EditorContainer({ isUpdating }: EditorContainerProps) {\r\n\r\n    const user = useSelector((state: RootState) => state.user);\r\n    const post = useSelector((state: RootState) => state.post);\r\n    const loading = useSelector((state: RootState) => state.loading);\r\n    const dispatch = useDispatch();\r\n    const routerHistory = useHistory();\r\n\r\n    ////////// state //////////////////\r\n\r\n    let initialCategoryLogic = '';\r\n    if (isUpdating) {\r\n        initialCategoryLogic = post ? post.category : ''\r\n    } else if (user.categories) {\r\n        initialCategoryLogic = user.categories['No Category'].category\r\n    } else {\r\n        initialCategoryLogic = '';\r\n    }\r\n\r\n    const initialCategoryValue = initialCategoryLogic;\r\n    const initialData = isUpdating ? post.editorData : '';\r\n    const initialTitle = isUpdating ? post.title : '';\r\n\r\n    const [categoryValue, setCategoryValue] = useState<string>(initialCategoryValue);\r\n    const [data, setData] = useState<string>(initialData);\r\n    const [title, setTitle] = useState<string>(initialTitle);\r\n\r\n    ////////// dialog ///////////////////////\r\n\r\n    const dispatchUploadSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Upload Complete',\r\n                'The post is uploaded successfully.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchUploadWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Upload Failed',\r\n                'An error has occured. Please try again.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchUpdateSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'Update Complete',\r\n                'The post is updated successfully.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchUpdateWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Update Failed',\r\n                'An error has occured. Please try again.'\r\n            )\r\n        );\r\n    };\r\n\r\n    ////////// click & submit & onChange ///////////////\r\n\r\n    const onClick = () => {\r\n        const time = new Date();\r\n        if (!user.uid) {\r\n            alert('You have to sign in to upload any post.');\r\n        } else if (isUpdating) {\r\n            try {\r\n                dispatch(\r\n                    updatePost(\r\n                        {\r\n                            postId: post.postId,\r\n                            title,\r\n                            editorData: data,\r\n                            category: categoryValue,\r\n                            uid: post.uid,\r\n                            time,\r\n                            comments: post.comments,\r\n                            email: post.email,\r\n                        }\r\n                    )\r\n                );\r\n                dispatch(\r\n                    getUserData(\r\n                        user.uid\r\n                    )\r\n                );\r\n                dispatchUpdateSuccessDialog();\r\n                routerHistory.push({ pathname: `/post/${post.postId}` });\r\n            } catch (e) {\r\n                console.log(e);\r\n                dispatchUpdateWarningDialog();\r\n            }\r\n        } else {\r\n            const postId = `${time.toUTCString()}_${user.uid}`;\r\n\r\n            try {\r\n                dispatch(\r\n                    uploadPost(\r\n                        {\r\n                            postId,\r\n                            title,\r\n                            editorData: data,\r\n                            category: categoryValue,\r\n                            uid: user.uid ? user.uid : 'no userdata',\r\n                            time,\r\n                            comments: [],\r\n                            email: user.email ? user.email : 'no userdata',\r\n                        }\r\n                    )\r\n                );\r\n                console.log(user.uid);\r\n                dispatch(\r\n                    getUserData(\r\n                        user.uid\r\n                    )\r\n                );\r\n                dispatchUploadSuccessDialog();\r\n                routerHistory.push({ pathname: `/post/${postId}` });\r\n            } catch (e) {\r\n                console.log(e);\r\n                dispatchUploadWarningDialog();\r\n            }\r\n        }\r\n    };\r\n    \r\n    const onChangeEditor = (event: any, editor: any) => {\r\n        setData(editor.getData());\r\n    };\r\n    const onChangeTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value);\r\n    };\r\n    const onChangeSelectCategory = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setCategoryValue(event.target.value);\r\n    };\r\n\r\n    /////// some useful consts //////////////\r\n    const categoriesToArray = user.categories ? Object.values(user.categories) : [];\r\n\r\n    const buildBody = (\r\n        <>\r\n            <h2>\r\n                {\r\n                    isUpdating\r\n                    ? 'Update Post'\r\n                    : 'Upload Post'\r\n                }\r\n            </h2>\r\n            <div className=\"category-title-wrapper\">\r\n                <select value={categoryValue} onChange={onChangeSelectCategory}>\r\n                    {\r\n                        user.categories\r\n                        ? categoriesToArray.map(category => (category.category !== 'All') && (\r\n                            <option value={category.category}>\r\n                                {category.category}\r\n                            </option>\r\n                        ))\r\n                        : null\r\n                    }\r\n                </select>\r\n                <input\r\n                    maxLength={40}\r\n                    type=\"name\"\r\n                    value={title}\r\n                    onChange={onChangeTitleInput}\r\n                    placeholder=\"Title\"\r\n                />\r\n            </div>\r\n            <Editor data={initialData} onChange={onChangeEditor}/>\r\n            <Button type=\"button\" onClick={onClick} isFilled>Submit</Button>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"editor-container inner\">\r\n            { \r\n                loading\r\n                ? <Loader />\r\n                : (\r\n                    isUpdating && !post.postId\r\n                    ? <InvalidAccess />\r\n                    : buildBody\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nEditorContainer.defaultProps = {\r\n    isUpdating: false\r\n}\r\n\r\nexport default EditorContainer;","import React from 'react';\r\nimport HeaderContainer from '../Container/Home/HeaderContainer';\r\nimport EditorContainer from '../Container/Writing/EditorContainer';\r\n\r\nfunction WritingPage() {\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <EditorContainer isUpdating={false}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default WritingPage;","import React from 'react';\r\nimport HeaderContainer from '../Container/Home/HeaderContainer';\r\nimport EditorContainer from '../Container/Writing/EditorContainer';\r\n\r\ntype UpdatePageProps = {\r\n    match: any;\r\n}\r\n\r\nfunction UpdatePage() {\r\n\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <EditorContainer isUpdating/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UpdatePage;","import React from 'react';\r\nimport { UserState } from '../../Modules/user';\r\nimport './UserSetting.scss';\r\n\r\ntype UserSettingProps = {\r\n    userState: UserState;\r\n    nicknameValue: string;\r\n    phraseValue: string;\r\n    newImgFileDir: string | null;\r\n    onChangePhraseValue: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onChangeNicnameValue: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onChangeImgFile: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nfunction UserSetting({ userState, newImgFileDir, nicknameValue, phraseValue, onChangePhraseValue, onChangeNicnameValue, onChangeImgFile }: UserSettingProps) {\r\n    \r\n    \r\n    return (\r\n        <div className=\"user-setting-wrapper\">\r\n            <h3>Email</h3>\r\n            <div>{userState.email}</div>\r\n            <h3>Nickname</h3>\r\n            <input type=\"name\" value={nicknameValue} onChange={onChangeNicnameValue}/>\r\n            <h3>Self-Intro</h3>\r\n            <input type=\"name\" value={phraseValue} onChange={onChangePhraseValue}/>\r\n            <h3>Profile Image</h3>\r\n            <img src={newImgFileDir || userState.imgUrl} alt=\"profile\"/>\r\n            <input\r\n                type=\"file\"\r\n                name=\"myImage\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\"\r\n                onChange={onChangeImgFile}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nUserSetting.defaultProps = {\r\n    newImgFile: null\r\n};\r\n\r\nexport default UserSetting;","import React from 'react';\r\nimport { category } from '../../Container/Home/HeaderContainer';\r\nimport \"./CategorySetting.scss\";\r\nimport SmallButton from '../Shared/SmallButton';\r\nimport { MdClear } from 'react-icons/md';\r\n\r\ntype CategorySettingProps = {\r\n    categories: {\r\n        [category: string]: category;\r\n    };\r\n    onClickXButton: () => void;\r\n    onClickAddButton: () => void;\r\n    inputValue: string;\r\n    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    showAddItem: boolean;\r\n}\r\n\r\nfunction CategorySetting({\r\n    categories,\r\n    onClickXButton,\r\n    onClickAddButton,\r\n    inputValue,\r\n    onInputChange,\r\n    showAddItem\r\n}: CategorySettingProps) {\r\n    const categoriesToArray = Object.values(categories);\r\n\r\n    return (\r\n        <div className=\"category-setting-wrapper\">\r\n            <ul className=\"category-setting-list\">\r\n                {\r\n                    categoriesToArray.map(category => (\r\n                        <li>\r\n                            <span>{category.category}</span>\r\n                            <strong>({category.numOfPosts})</strong>\r\n                        </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n            {\r\n                showAddItem\r\n                ? \r\n                <div className=\"input-wrapper\">\r\n                    <input\r\n                        type=\"name\"\r\n                        value={inputValue}\r\n                        onChange={onInputChange}\r\n                        placeholder=\"New Category Name\"\r\n                    />\r\n                    <button className=\"close-new-category-btn\" onClick={onClickXButton}><MdClear /></button>\r\n                </div>\r\n                : null\r\n            }\r\n            <SmallButton color=\"green\" onClick={onClickAddButton}>\r\n                {\r\n                    showAddItem\r\n                    ? 'Add Category'\r\n                    : 'New Category'\r\n                }\r\n            </SmallButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(CategorySetting);","import React, { useState } from 'react';\r\nimport UserSetting from '../../Components/UserSettingsPage/UserSetting';\r\nimport CategorySetting from '../../Components/UserSettingsPage/CategorySetting';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../Modules';\r\nimport Button from '../../Components/Shared/Button';\r\nimport Loader from '../../Components/Shared/Loader';\r\nimport { updateUserData, getUserData, UserState } from '../../Modules/user';\r\nimport { loadDialog } from '../../Modules/dialog';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { uploadImgAndUpdateDatabase } from '../../api/firebase';\r\nimport InvalidAccess from '../../Components/Shared/InvalidAccess';\r\nimport \"./UserSettingsContainer.scss\";\r\n\r\nfunction UserSettingsContainer() {\r\n\r\n    const user = useSelector((state: RootState) => state.user);\r\n    const loading = useSelector((state: RootState) => state.loading);\r\n    const dispatch = useDispatch();\r\n    const routerHistory = useHistory();\r\n\r\n    const [phrase, setPhrase] = useState(user.phrase ? user.phrase : '');\r\n    const [nickname, setNickname] = useState(user.name ? user.name : '');\r\n    const [showAddItem, setShowAddItem] = useState(false);\r\n    const [imgFile, setImgFile] = useState<null | File>(null);\r\n    const [imgFileDir, setImgFileDir] = useState<any>(null);\r\n    const [categoriesTemp, setCategoriesTemp] = useState(user.categories ? user.categories : {});\r\n    const [categoryInputValue, setCategoryInputValue] = useState('');\r\n\r\n\r\n    \r\n\r\n    ////// dispatch dialogs ////////////////////////\r\n\r\n    const dispatchUpdateSuccessDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'success',\r\n                'User Settings Updated',\r\n                'User settings are updated successfully.'\r\n            )\r\n        );\r\n    };\r\n    const dispatchUpdateWarningDialog = () => {\r\n        dispatch(\r\n            loadDialog(\r\n                'warning',\r\n                'Error',\r\n                'An error has occured. Please try again.'\r\n            )\r\n        );\r\n    };\r\n\r\n    /////// file reader /////////////\r\n    const fr = new FileReader();\r\n    fr.onload = function () {\r\n        setImgFileDir(fr.result);\r\n    }\r\n\r\n    ////// onchange/onclick ////////////////////////\r\n    const onChangeNickname = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNickname(event.target.value);\r\n    };\r\n    const onChangePhraseValue = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPhrase(event.target.value);\r\n    };\r\n    const onChangeImgFile = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setImgFile(event.target.files? event.target.files[0] : null);\r\n        if (event.target.files && event.target.files[0]) fr.readAsDataURL(event.target.files[0]);\r\n    }\r\n    const onClickAddButton = () => {\r\n        if (!showAddItem) {\r\n            setShowAddItem(true);\r\n        } else if (categoryInputValue !== \"\") {\r\n            setCategoriesTemp(\r\n                Object.assign({}, {\r\n                    [categoryInputValue]: {\r\n                        category: categoryInputValue,\r\n                        numOfPosts: 0\r\n                    }\r\n                }, categoriesTemp\r\n                )\r\n            );\r\n            setCategoryInputValue('');\r\n        } else {\r\n            alert('Please put in any value inside the input!');\r\n        }\r\n    };\r\n    const onClickXButton = () => {\r\n        setShowAddItem(false);\r\n        setCategoryInputValue('');\r\n    }\r\n    const onClickSubmitButton = async () => {\r\n\r\n        try {\r\n            dispatch(\r\n                updateUserData(\r\n                    {\r\n                        uid: user.uid,\r\n                        name: nickname,\r\n                        phrase: phrase,\r\n                        imgUrl: user.imgUrl ? user.imgUrl : 'no userdata',\r\n                        email: user.email ? user.email : 'no userdata',\r\n                        categories: categoriesTemp\r\n                    }\r\n                )\r\n            );\r\n            if (imgFileDir) await uploadImgAndUpdateDatabase(user.uid!, imgFile!);\r\n            dispatch(\r\n                getUserData(\r\n                    user.uid\r\n                )\r\n            );\r\n            dispatchUpdateSuccessDialog();\r\n            routerHistory.push({ pathname: '/home' });\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatchUpdateWarningDialog();\r\n        }\r\n    };\r\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCategoryInputValue(event.target.value);\r\n    }\r\n\r\n    const buildBody = (\r\n        <>\r\n            <h2>User Information</h2>\r\n            <UserSetting\r\n                userState={user}\r\n                nicknameValue={nickname}\r\n                phraseValue={phrase}\r\n                newImgFileDir={imgFileDir}\r\n                onChangeNicnameValue={onChangeNickname}\r\n                onChangePhraseValue={onChangePhraseValue}\r\n                onChangeImgFile={onChangeImgFile}\r\n            />\r\n            <h2>Categories</h2>\r\n            <CategorySetting\r\n                categories={categoriesTemp}\r\n                onClickAddButton={onClickAddButton}\r\n                onClickXButton={onClickXButton}\r\n                onInputChange={onInputChange}\r\n                inputValue={categoryInputValue}\r\n                showAddItem={showAddItem}\r\n            />\r\n            <div className=\"user-setting-button-wrapper\">\r\n                <Button isFilled type=\"submit\" onClick={onClickSubmitButton}>\r\n                    Submit\r\n                </Button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div className=\"user-setting-container inner\">\r\n            {\r\n                loading\r\n                ? <Loader />\r\n                : (\r\n                    user.uid\r\n                    ? buildBody\r\n                    : <InvalidAccess />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserSettingsContainer;","import React from 'react';\r\nimport HeaderContainer from '../Container/Home/HeaderContainer';\r\nimport UserSettingsContainer from '../Container/UserSettings/UserSettingsContainer';\r\n\r\nfunction UserSettingsPage() {\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <UserSettingsContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UserSettingsPage;","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport SmallButton from '../../Components/Shared/SmallButton';\r\nimport \"./UnfoundContainer.scss\";\r\n\r\nfunction UnfoundContainer() {\r\n\r\n    const routerHistory = useHistory();\r\n\r\n    const onClick = () => {\r\n        routerHistory.push({ pathname: '/home' });\r\n    }    \r\n\r\n    return (\r\n        <div className=\"unfound-container\">\r\n            <h2>Page Not Found</h2>\r\n            <h3>The Page does not exist!</h3>\r\n            <div className=\"unfound-page-img\">Unfound Page Image</div>\r\n            <SmallButton isFilled color=\"green\" onClick={onClick}>To Home</SmallButton>     \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UnfoundContainer;","import React from 'react';\r\nimport UnfoundContainer from '../Container/Unfound/UnfoundContainer';\r\nimport \"./UnfoundPage.scss\";\r\n\r\nfunction UnfoundPage () {\r\n    return (\r\n        <div className=\"unfound-page\">\r\n            <UnfoundContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UnfoundPage;","import firebase from 'firebase';\nimport React from 'react';\nimport LoginPage from './Pages/LoginPage';\nimport DialogContainer from './Container/Dialog/DialogContainer';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport HomePage from './Pages/HomePage';\nimport RegisterPage from './Pages/RegisterPage';\nimport CategoryPage from './Pages/CategoryPage';\nimport PostPage from './Pages/PostPage';\nimport WritingPage from './Pages/WritingPage';\nimport UpdatePage from './Pages/UpdatePage';\nimport UserSettingsPage from './Pages/UserSettingsPage';\nimport './App.scss';\nimport UnfoundPage from './Pages/UnfoundPage';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9k7r-SspAyi_JU1LQ3e8aIFLqZ93oay8\",\n  authDomain: \"beomlog-4157c.firebaseapp.com\",\n  databaseURL: \"https://beomlog-4157c.firebaseio.com\",\n  projectId: \"beomlog-4157c\",\n  storageBucket: \"beomlog-4157c.appspot.com\",\n  messagingSenderId: \"130805323864\",\n  appId: \"1:130805323864:web:bbcec3822a13a38139922d\",\n  measurementId: \"G-KT4F1VCYFG\"\n};\nfirebase.initializeApp(firebaseConfig)\nfirebase.analytics();\nexport const db = firebase.firestore();\nexport const storage = firebase.storage();\n\nfunction App() {\n\n  return (\n    <>\n      <Switch>\n        <Redirect from=\"/\" to=\"/home\" exact/>\n        <Route path=\"/auth\" component={LoginPage} exact/>\n        <Route path=\"/auth/register\" component={RegisterPage} exact/>\n        <Route path=\"/home\" component={HomePage} exact />\n        <Route path=\"/category/:category\" component={CategoryPage} exact/>\n        <Route path=\"/post/:postId\" component={PostPage} exact/>\n        <Route path=\"/upload\" component={WritingPage} exact/>\n        <Route path=\"/update\" component={UpdatePage} exact/>\n        <Route path=\"/setting\" component={UserSettingsPage} exact/>\n        <Route render={() => <UnfoundPage />}/>\n      </Switch>\n      <DialogContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport dialog from './dialog';\r\nimport user, { userSaga } from './user';\r\nimport post, { postSaga } from './post';\r\nimport loading from './loading';\r\nimport { all } from 'redux-saga/effects';\r\nimport categoryPosts, { categoryPostsSaga } from './categoryPosts'\r\n\r\nconst rootReducer = combineReducers({\r\n    dialog,\r\n    user,\r\n    post,\r\n    categoryPosts,\r\n    loading\r\n});\r\n\r\nexport function* rootSaga() {\r\n    yield all([userSaga(), postSaga(), categoryPostsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer, { rootSaga } from './Modules';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}